@model ListAssist.Data.Models.LAList

@{
    ViewBag.Title = "Edit List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section PageHeader {Edit!}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="row">
        <div class="small-12 medium-8 columns listDetailsEdit">
            @Html.HiddenFor(model => model.ID)
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "listDetailsName" })
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
        <div class="small-12 medium-4 columns">
            <button type="submit" value="Save" class="button expand">Save</button>
        </div>
        <div class="small-12 medium-6 columns listGrid list-items">
            <div class="small-4 medium-3 columns listHeader">
                Done
            </div>
            <div class="small-8 medium-9 columns listHeader">
                Description
            </div>
        @for (var i = 0; i < Model.LAListItems.Count; i++)
        {
            @Html.HiddenFor(model => model.LAListItems[i].ID)
            @Html.HiddenFor(model => model.LAListItems[i].ListID)
            <div class="small-12 columns itemWrapper">
                <div class="row">
                    <div class="small-4 medium-3 columns itemCheck">
                        @Html.CheckBoxFor(model => model.LAListItems[i].Done)
                    </div>
                    <div class="small-6 medium-7 columns itemDescription">
                        @Html.EditorFor(model => model.LAListItems[i].Description)
                        @Html.ValidationMessageFor(model => model.LAListItems[i].Description, "", new { @class = "text-danger" })
                    </div>
                    <div class="small-2 columns removeItem">
                        @Html.ActionLink("X", "RemoveListItem", new { itemID = Model.LAListItems[i].ID, listID = Model.LAListItems[i].ListID })
                    </div>
                    <div name="itemDetails" class="small-12 columns hide">
                        <p>Put the details here...</p>
                        @Html.DisplayFor(model => model.LAListItems[i].Description)
                    </div>
                </div>
            </div>
        }
            <div class="small-12 columns">
                @Html.ActionLink("Add Item", "AddListItem", new { id = Model.ID }, new { @class = "button expand success round" })
            </div>
        </div>
        <div class="medium-6 columns show-for-medium-up listGrid replacement-suggestions">
            <div class="small-12 listHeader">
                Replacement Suggestions
            </div>
            @for (var j = 0; j < Model.LASuggestions.Count; j++)
            {
                @Html.HiddenFor(model => model.LASuggestions[j].ID)
                @Html.HiddenFor(model => model.LASuggestions[j].ListID)
                <div class="small-12 columns itemWrapper">
                    <div class="row">
                        <div class="small-10 columns suggestion-description">
                                @Html.DisplayFor(model => model.LASuggestions[j].Description)
                        </div>
                        <div class="small-2 columns suggestion-button">
                            @Ajax.ActionLink("Add", "AcceptSuggestion",
                                new { suggestionId = Model.LASuggestions[j].ID }, 
                                new AjaxOptions { HttpMethod = "POST", OnSuccess="success" },
                                new { @class = "button expand success round" })
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>      
}

<script>
    function success(data) {
        window.location = data.url;
    }
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
